import express from "express";
import dotenv from "dotenv";
dotenv.config();

const app = express();
app.use(express.json());
app.use(express.static("public"));

// YardÄ±mcÄ±: basit demo cevap Ã¼reten fonksiyon
function demoAnswer(question) {
  return {
    choices: [
      {
        message: {
          content: `ğŸ“— (DEMO) '${question}' konusu hakkÄ±nda:
Bu bir demo cevaptÄ±r â€” gerÃ§ek OpenAI eriÅŸimi yok. KÄ±sa Ã¶zet: ${question} hakkÄ±nda temel bir aÃ§Ä±klama yapÄ±lÄ±r.`
        }
      }
    ]
  };
}

app.post("/api/chat", async (req, res) => {
  const question = req.body.question || "";
  console.log("Gelen soru:", question);

  // EÄŸer API KEY yoksa doÄŸrudan demo dÃ¶ndÃ¼r
  if (!process.env.OPENAI_API_KEY) {
    console.log("API anahtarÄ± bulunamadÄ± â€” demo dÃ¶ndÃ¼rÃ¼lÃ¼yor.");
    return res.json(demoAnswer(question));
  }

  // EÄŸer anahtar varsa gerÃ§ek OpenAI isteÄŸini yap (hata durumunda demo dÃ¶ner)
  try {
    const fetch = global.fetch || (await import("node-fetch")).default;

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: "Sen bir ders anlatÄ±cÄ±sÄ±n." },
          { role: "user", content: question },
        ],
        max_tokens: 500
      }),
    });

    const data = await response.json();

    // EÄŸer OpenAI hata dÃ¶nerse demo dÃ¶ndÃ¼r
    if (!response.ok || data.error) {
      console.warn("OpenAI hatasÄ±:", data);
      return res.json(demoAnswer(question));
    }

    return res.json(data);
  } catch (err) {
    console.error("Sunucu hatasÄ±:", err);
    return re
